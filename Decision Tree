# Import necessary libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score
import time 


# Load the dataset from the user-provided CSV file
try:
    df = pd.read_csv('/content/PlayTennis.csv')
except FileNotFoundError:
    print("File not found. Please make sure the file exists and the path is correct.")
    exit()
start_time = time.time()

df = pd.get_dummies(df, columns=['Outlook', 'Temperature', 'Humidity', 'Wind'], drop_first=True)
# Split the dataset into features (X) and the target variable (y)
X = df.drop(columns=['Play Tennis'])  # Adjust 'PlayTennis' to your target column name
y = df['Play Tennis']  # Adjust 'PlayTennis' to your target column name

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Decision Tree classifier
clf = DecisionTreeClassifier()

# Fit the classifier to the training data
clf.fit(X_train, y_train)

# Make predictions on the test data
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# You can also visualize the decision tree
# Note: You may need to install additional libraries for tree visualization
# such as Graphviz and pydotplus
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
plot_tree(clf, filled=True, feature_names=X.columns, class_names=y.unique())

end_time = time.time()
elapsed_time = end_time - start_time
print(f'Time taken by the algorithm: {elapsed_time:.4f} seconds\n')
print(f'    ----------------------------------------------------Graph----------------------------------------------------\n')
plt.show()
